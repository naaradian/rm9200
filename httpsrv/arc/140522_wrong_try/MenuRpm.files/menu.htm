var menuList = new Array(
"StatusRpm", 					0,		0, 		str_menu.status,
"",							1,		-1,			str_menu.basic,
"WzdStartRpm", 				0,		0, 	 		str_menu.wizard,
"OperationModeRpm",			0,		0,			str_menu.OperationMode,
"NetworkCfgRpm", 		 		0,		0, 	 str_menu.network,
"", 		 			0,		1, 	 str_menu.ntwMain,
"NetworkLanCfgRpm", 		 		0,		2, 	 str_menu.ntwLan,
"WanCfgRpm", 			 	0,		2, 	 str_menu.ntwWan,
"WanOnlineDetectCfgRpm", 		0,		2, 	 str_menu.ntwService,
"MacCloneCfgRpm", 		0,		2, 	 str_menu.ntwMacClone,
"FlowBalanceRpm", 	 	0,		2, 	 str_menu.ntwFlowBalace,
"BandCtrlCfgRpm", 	0,		2, 	 str_menu.ntwBandWidth,
"VLANCfgRpm", 		 	0,		2, 	 str_menu.ntwVlan,
"PortmonitorCfgRpm", 		0,		2, 	 str_menu.ntwPrtMonitor,
"BalancePolicyRpm",			0,		2,			str_menu.wanBalancePolicy,
"WanPortParaRpm",				0,		2, 	 		str_menu.ntwPrtPara,
"", 						0,		1, 		 str_menu.wlanMain,
"WlanNetworkRpm", 	 	0,		2, str_menu.wlanNetwork,
"WlanBasicRpm",			0,		2, str_menu.wlanBasic,
"WlanModeRpm",			0,		2, str_menu.wlanMode,
"WlanSecurityRpm",		0,		2, str_menu.wlanSeurity,
"popupSiteSurveyRpm",	0,		2, str_menu.siteSurvey,
"WlanSecurityRpm", 	 	0,		2, 	 str_menu.wlanSecurityRpm,
"WlanMacFilterRpm", 	0,		2, 	 str_menu.wlanMacFlt,
"WlanStationRpm", 	 	0,		2, 	 str_menu.wlanStation,
"WlanAntennaRpm",		0,		2,	str_menu.wlanAntenna,
"WlanThroughputRpm",	0,		2,	str_menu.wlanThroughput,
"",							1,		-1,			str_menu.advanced,
"", 						0,		1, 	 	 str_menu.dhcpServerMain,
"LanDhcpServerRpm", 	 	0,		2, 	 str_menu.dhcpServer,
"AssignedIpAddrListRpm",		0,		2, 	 str_menu.dhcpList,
"FixMapCfgRpm", 		 	0,		2, 	 str_menu.dhcpFixMap,
"WlanAdvCfgRpm",			0,		0,	 str_menu.wlanAdv,
"", 						0,		1, 	 str_menu.frwVrtMain,
"VirtualServerRpm", 	0,		2, 	 str_menu.frwVrtServer,
"SpecialAppRpm", 	 	0,		2, 	 str_menu.frwSpcApp,
"DMZRpm",					0,		2, 	 str_menu.frwDMZ,
"UpnpCfgRpm",	 		0,		2, 	 str_menu.frwUpnp,
"",							0,		1, 	 	 str_menu.scrFrwMain,
"WzdFireWallRpm", 	 		0,		2, 	 str_menu.scrWzdFrw,
"FireWallRpm",				0,		2, 		str_menu.scrFrw,
"WanIpFilterRpm",				0,		2, 		str_menu.scrWanIpFlt,
"DomainFilterRpm",			0,		2, 		str_menu.scrDomainFlt,
"LanMacFilterRpm", 	0,		2, 		str_menu.scrmacFlt,
"ManageControlRpm",           0,      2,          str_menu.scrMagControl,   /*changed by ZQQ,09.04.01*/
"ScreenRpm", 	 	0,		2, 	 str_menu.scrScreen,
"AdvScrRpm", 	0,		2, 	 str_menu.scrAdvScr,
"PingRpm",					0,		2, 	 str_menu.scrPing,
"WanPingRpm",					0,		2, 	 str_menu.scrWanPing,
"StaticRouteTableRpm", 		0,		0, 	 		str_menu.staRoute,
"",							0,		1, 	 	 str_menu.sessionMain,
"SessionLimitRpm",			0,		2, 	 	 str_menu.sessionLimit,
"SessionListRpm",				0,		2, 	 	 str_menu.sessionList,
"",							0,		1, 	 	 str_menu.QosCfgMain,
"QoSCfgRpm",					0,		2, 	 	 str_menu.QosCfg,
"QoSRuleListRpm",				0,		2, 	 	 str_menu.QosRuleList,
"QoSCfgSOHORpm",					0,		0,			str_menu.QoSCfgSOHO,		/* add by wxl */
"",						 0,		1, 	 str_menu.lanArpMain,
"LanArpBindingRpm",			0,		2, 	 		str_menu.lanArpBind,
"LanArpBindingListRpm",		0,		2, 	 str_menu.lanArpList,
"DdnsAddRpm",				 	0,		0, 	 		str_menu.ddnsAddMain,
"",							0,		1,		 str_menu.swtMain,
"PortStatisticsRpm",			0,		2, 	 	 str_menu.swtPortSta,
"PortMirrorRpm", 			0,		2,	 		str_menu.swtPortMirror,
"PortRateControlRpm",			0,		2, 	 	 str_menu.swtPortRateSet,
"PortParaRpm", 				0,		2, 	 str_menu.swtPortPara,
"PortStatusRpm", 			0,		2, 	 	 str_menu.swtPortStatus,
"PortBasedVLANRpm",		 	0,		2, 	 	 str_menu.swtPortBaseVlan,
"",							1,		-1,			str_menu.maintenance,
"",							0,		1, 	 	 str_menu.systoolMain,
"DateTimeCfgRpm",				0,		2, 	 str_menu.sysTime,
"DiagnosticRpm",			0,			2,		str_menu.sysDiagnostic,
"SoftwareUpgradeRpm",			0,		2, 	 str_menu.sysSoftUpgrade,
"RestoreDefaultCfgRpm",			0,		2, 	 str_menu.sysRstDefault,
"BakNRestoreRpm",				0,		2, str_menu.sysBackupRst,
"PingWatchDogRpm",      0,      2,   str_menu.sysPwd,
"SpeedTestRpm",         0,      2,   str_menu.sysSp,
"SysRebootRpm",					0,		2, 	 str_menu.sysReboot,
"ChangeLoginPwdRpm",			0,		2, 	 str_menu.sysPassword,
"SystemLogRpm",					0,		2, 	 str_menu.sysLog,
"SysLogSetRpm",					0,		2, 	 		str_menu.sysLogSet,
//"ManageControlRpm", 			0,		2, 			str_menu.sysManageCnt,
"SystemStatisticRpm",			0,		2, 		str_menu.sysSta,
"WanSpeedDetectRpm",			0,		2,			str_menu.wanSpdDet,
"NatShowRpm",					0,		2,			str_menu.natShow,
"NatSrcPortSettingRpm",			0,		2,			str_menu.natSrcPortSetting,
"MainRpm",						0,		0,	 		str_menu.ProductMain
);
var map = new Array();
function menuInit(option)
{
for (var i = 0; i < option.length; i++)
{
if ( option[i] == 0 )
{
continue;
}
for (var n = 0; n < menuList.length; n +=4 )
{
if ( menuList[n] == option[i] )
{
menuList[n+1] = 1;
break;
}
}
}
n = menuList.length - 4;
var url = "";
var level = 0;
while (n >= 0)
{
if ( menuList[n+1] == 1 && menuList[n+2] > 0)
{
url = menuList[n];
level = menuList[n+2];
}
else if ( menuList[n+2] > 0 && menuList[n+2] < level )
{
menuList[n] = url;
menuList[n+1] = 1;
level = menuList[n+2];
}
n -= 4;
}
}
function menuDisplay()
{
var i = 0;
var className;
for (var n = 0; n < menuList.length; n +=4 )
{
if ( menuList[n+1] != 1 )
{
continue;
}
if (menuList[n+2] == 0)
{
className = "dot1";
display = "block";
}
else if (menuList[n+2] == -1)
{
className = "info"
display = "block"
}
else if ( (menuList[n+2] > 0) && (menuList[n+4+2] > menuList[n+2]) )
{
className = "plus";
if ( menuList[n+2] == 1 )
{
display = "block";
}
else
{
display = "none";
}
}
else
{
className = "dot2";
display = "none";
}
var power = (menuList[n+2] > 0)?(menuList[n+2] - 1):0;
if(menuList[n+2] == -1)
{
document.write('<ol id=ol'+i+' class='+className+' style="display:'+display+'; background-position:'+(13*power)+'px 3px;PADDING-LEFT: '+(13*power+0)+'px;">'+menuList[n+3]+'</ol>');
}
else
{
document.write('<ol id=ol'+i+' class='+className+' style="display:'+display+'; background-position:'+(13*power)+'px 3px;PADDING-LEFT: '+(13*power+13)+'px;"><A id=a'+i+' href="/userRpm/'+menuList[n]+'.htm" target=mainFrame class=L1 onClick="doClick('+i+');">'+menuList[n+3]+'</a></ol>');
}
//map.push(menuList[n+2]);
map[map.length] = menuList[n+2];
i++;
}
}
function collapseAll()
{
var e;
for(var i=0;;i++)
{
try{
if(map[i] > 1)
{
document.getElementById('ol'+i).style.display = "none";
}
if(document.getElementById('ol'+i).className == "minus")
{
document.getElementById('ol'+i).className = "plus";
}
}
catch(e)
{
break;
}
}
for(var i=0;i<document.links.length;i++)
{
document.links[i].className = "L1";
}
}
function expandBranch(n)
{
var branch;
var l = 0;
var index;
while( l != 1 )
{
branch = document.getElementById('ol'+n);
l = map[n];
index = n;
if (branch.className == "plus")
{
branch.className = "minus";
}
else
{
while(1)
{
if (map[index] != l - 1)
index--;
else
break;
}
branch = document.getElementById('ol'+index);
branch.className = "minus";
}
n = index;
l = map[n];
while(1)
{
index++;
if(index >= map.length)
{
break;
}
branch = document.getElementById('ol'+index);
if (map[index] == (l + 1))
{
branch.style.display = "block";
}
else if (map[index] <= l)
{
break;
}
}
}
}
function doClick(n)
{
var e;
collapseAll();
obj = document.getElementById('ol'+n);
if (obj.className == "plus")
{
document.getElementById('a'+(n+1)).className = "L2";
}
else
{
document.getElementById('a'+n).className = "L2";
}
if (map[n] > 0)
expandBranch(n);
}
