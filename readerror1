extern "C" void ReadErrors1(unsigned char mod)
{
//  printfp("\n\rReadErrors1 ");


char Buf[3];



PVG610_MODEM_FEC_COUNTERS_STRUCT Fc;
PVG610_MODEM_STATUS_STRUCT	Ms;
PVG610_MODEM_ACQUIRE_COUNTERS_STRUCT Ac;
PVG610_NET_E1_ALARMS_STRUCT  Stat[E1_LINES_QUANTITY];

PVG610_NET_ETH_PM_STRUCT Pm;
UINT16 OneSecondPeriodCounter;

UINT64 tmp64;
//printfpd("\n\r tmprtr = %d ", GetTempSat());


//PVG610_API_ModemAcquireCountersGet(0, 0, &Ac);
unsigned char ans, ans1;


unsigned long   variant =  GetNumConfigFilet(0) & CONFIG_FILE_MASK;
//160607 unsigned long   variant1 =  GetNumConfigFilet(1) & CONFIG_FILE_MASK;	



	unStatePUM.statePUM.state[4] = GetStmPhyReg(mod);//inportb(0x524);
	if(unStatePUM.statePUM.state[4] & FAR_LOOP)
	{
	  unStatePUM.statePUM.state[5] |= OLD_FAR_LOOP;
	}
	else
	{
	   unStatePUM.statePUM.state[5] &= ~(OLD_FAR_LOOP);
	}

	if(unStatePUM.statePUM.state[4] & NEAR_LOOP)
	{
	  unStatePUM.statePUM.state[5] |= OLD_NEAR_LOOP;
	}
	else
	{
	   unStatePUM.statePUM.state[5] &= ~(OLD_NEAR_LOOP);
	}
  	unStatePUM.statePUM.state[6] = GetEthReg(mod);
#ifndef PROG_MD310
#ifndef PROG_BMDN6MI

//___________________________________________________
 unEmb2TypeVer.emb2TypeVer.signature_hardware[3] = GetRele();
 unEmb2TypeVer.emb2TypeVer.signature_hardware[4] = GetInputs();
//___________________________________________________
#endif
#endif

 unEmb2TypeVer.emb2TypeVer.signature_hardware[12] = dev_status;


 unsigned char deviceindex = mod << 1;
//#ifndef LOAD_ONE_PROVINGENT_ON_PLATA
//160607  unsigned char deviceindex1 = (mod << 1) + 1;
//#endif

//  printf("\n\rread errors:%d", mod);
 //  PVG610_API_ModemFecCountersGet(current_channel, 0, &Fc);
//#ifdef USART0_TRY_PDC_1T
//  printfpd("\n\rss%ld", time1);
//#endif
//___________________________________________________
	 /*
 ans = PVG610_API_NetE1AlarmsGet(deviceindex,0, 0x1fffffl, &Stat[0]);
if(ans) return;

for(i = 0; i < E1_LINES_QUANTITY; i++)
{
 modemp[deviceindex].netE1Alarms[i] = Stat[i].netE1Alarms;
}

 //printfp("\n\rReadErrors 1");
	*/

//____________________________________________________

 ans = PVG610_API_ModemStatusGet((deviceindex), 0, &Ms);
//#ifdef USART0_TRY_PDC_1T
//  printfpd("\n\rsf%ld", time1);
//#endif
 if(ans) 
 {
  norma_status[deviceindex]++;
 return;
 }
 else
  {
   norma_status[deviceindex] = 0;
  }

   //  printf("\n\r acquireStatus : %02X" , Ms.acquireStatus);
  
 modemp[deviceindex].acquireStatus =   Ms.acquireStatus;
//  printfpd("\n\r1: %d", Ms.acquireStatus);
  FillLock(mod,Ms.acquireStatus);
  
modemp[deviceindex].carrierOffset =    Ms.carrierOffset;

//160607if(variant == variant1)

if(1)
 {
SetMSweep(Ms.carrierOffset);

if(g_previons_status != modemp[deviceindex].acquireStatus)
//if(1)
 {
   //hier can set need write event to yournal  

  //   previons_status =	 modemp[deviceindex].acquireStatus;

   sprintf(Buf, "%02d",deviceindex);

   if(modemp[deviceindex].acquireStatus)
   {
#ifdef YOURNAL
     Add_Event(EV_LOCK, 2, Buf); //for test	   it work for variant ==  variant1 only
	 timelock = time1;
	 timekeepMSE = time1;
#endif
   }
   else
   {
#ifdef YOURNAL
	 Add_Event(EV_UNLOCK, 2, Buf); //for test
#endif
   }
 }
g_previons_status =	 modemp[deviceindex].acquireStatus;

 }
//printfpd("\n\r carrierOffset : %d" , Ms.carrierOffset);



     modemp[deviceindex].internalAgc = Ms.internalAgc;            // in dB, normal range [-5 to 40]
  // 	 SetMAGC(Ms.internalAgc);

   
     modemp[deviceindex].externalAgcRegister = Ms.externalAgcRegister;    // Directly reflects PVG register

 //160607 if(variant == variant1)

if(1)	//160607
 {
	  SetMAGC(Ms.externalAgcRegister);
 }
 //______________110919
 
  modemp[deviceindex].acmEngineEnabled =   Ms.acmEngineEnabled;

//printfpd("\n\r Ms.acmEngineEnabled : %d", Ms.acmEngineEnabled);

 //  if(Ms.acmEngineEnabled)
   if(1)
   {
 
	 modemp[deviceindex].txAcmProfile =   Ms.txAcmProfile;
	 SetTxMode(Ms.txAcmProfile);
// 	 SetParamsTxFromCfg(Ms.txAcmProfile);

 //  if(modemp[deviceindex].rxAcmProfile != Ms.rxAcmProfile)
   if(1)
   {
     modemp[deviceindex].rxAcmProfile =   Ms.rxAcmProfile;	


//  	 if(variant == variant1)

	if(1)
  	 {
   	 SetParamsRxFromCfg(Ms.rxAcmProfile);
	 SetViewModesFromCfg(Ms.txAcmProfile ,Ms.rxAcmProfile);
  	 }
   }

// MRMode.Value =  Ms.rxAcmProfile;
// MRMode.ChangingValue = MRMode.Value;
// dev1.md100se.MRMode =  MRMode.Value;

	   
   }
   else
   {
	 modemp[deviceindex].txAcmProfile =   ACM_MODES;
     modemp[deviceindex].rxAcmProfile =   ACM_MODES;
   }
	 
 //____________________110919

 //  printfp("\n\rReadErrors 2");


//if(1) //110823
// {
 /* 110823
 unStatePUM.statePUM.state[2] &= ~(CHANNEL1_LOCK_BIT);//2
 */


 unStatePUM.statePUM.state[7] = Ms.normalizedMseTenths;//2
 unStatePUM.statePUM.state[8] = Ms.normalizedMseTenths >> 8;//2
   
//___________________________________________________________
modemp[deviceindex].counterSlip =   Ms.lastAcquireError;
modemp[deviceindex].absoluteMseTenths =   Ms.absoluteMseTenths;
modemp[deviceindex].normalizedMseTenths =   Ms.normalizedMseTenths;
modemp[deviceindex].radialMseTenths =   Ms.radialMseTenths;

ulevelsn15503.levelsn15503.absoluteMse[mod] = Ms.absoluteMseTenths;
ulevelsn15503.levelsn15503.normalizedMse[mod] = Ms.normalizedMseTenths;
ulevelsn15503.levelsn15503.radialMse[mod] = Ms.radialMseTenths;


//160607if(variant == variant1)

 if(1)
 {
 NMSE =  Ms.normalizedMseTenths;
  LOCK =  Ms.acquireStatus;

SetMEbN(Ms.normalizedMseTenths);
 
#ifndef FEC_BER
SetMBER(0, Ms.ldpcDecoderStress);
#endif
 }

// printfp("\n\rReadErrors 3");


 ans = PVG610_API_ModemAcquireCountersGet((deviceindex), 0, &Ac);
 if(ans) return;
//#ifdef USART0_TRY_PDC_1T
//  printfpd("\n\raf%ld", time1);
//#endif

uerrsn15503work.errsn15303work.counterSlip[mod] +=   Ac.numLolEvents;

//if(!(Ac.numLolEvents)) //110823
//if(variant == variant1)
// {

 if( (!(Ac.numLolEvents)) && (Ms.acquireStatus) ) //121016
//121016if(Ms.acquireStatus) //110922 maked temporary without counters
{
 unStatePUM.statePUM.state[2] &= ~(CHANNEL1_LOCK_BIT);//2
}
else
{
 unStatePUM.statePUM.state[2] |= CHANNEL1_LOCK_BIT;//2
}

//}

//#ifdef USART0_TRY_PDC_1T
//  printfpd("\n\rfs%ld", time1);
//#endif

 ans = PVG610_API_ModemFecCountersGet((deviceindex), 0, &Fc);

if(ans) return;
// #ifdef USART0_TRY_PDC_1T
//  printfpd("\n\rff%ld", time1);
//#endif

//    printf("\n\rread mod : %d errors:%ld", (mod << 1), );

  modemp[deviceindex].fecBlockCounter +=   Fc.fecBlockCounter;
  modemp[deviceindex].fecUncorrectedBlockCounter +=   Fc.fecUncorrectedBlockCounter;
  modemp[deviceindex].rsByteCounter =   Fc.rsByteCounter;
  modemp[deviceindex].rsErrorByteCounter =   Fc.rsErrorByteCounter;
  modemp[deviceindex].ldpcAvgIterations =   Fc.ldpcAvgIterations;
  modemp[deviceindex].protectionRxBytesFromProtection =   Fc.protectionRxBytesFromProtection;
  modemp[deviceindex].protectionUncorrectedBytes =   Fc.protectionUncorrectedBytes;


#ifdef FEC_BER
//160607 if(variant == variant1)
if(1)
 {

SetMBER(Fc.fecBlockCounter, Fc.fecUncorrectedBlockCounter);
//SetMBER(Fc.fecUncorrectedBlockCounter, Fc.fecBlockCounter);
}
#endif // FEC_BER




//  KoefErrors[deviceindex] =	 (double)Fc.protectionRxBytesFromProtection / (double)Fc.rsByteCounter;

if(GetTestMode() == 0x5A)
{
//#ifndef USART0_TRY_PDC_1T
// printf("\r\nmod : %d Status : %d prot:%ld ans : %X", (deviceindex), modemp[deviceindex].acquireStatus, modemp[deviceindex].protectionRxBytesFromProtection, ans);
//#else
 printfp("\n\rmod : ");
 printfpd("%d",(deviceindex));
 printfp("\n\r Status : ");
 printfpd("%d", modemp[deviceindex].acquireStatus);
 printfp("\n\r ldpcDecoderStress");
 printfpd("%ld" , Ms.ldpcDecoderStress);
 printfp("\n\rfecUncorrectedBlockCounter: ");
 printfpd("%ld", modemp[deviceindex].fecUncorrectedBlockCounter);
 printfp("\n\rfecBlockCounter: ");
 printfpd("%ld", modemp[deviceindex].fecBlockCounter);
 printfp("\n\rrsErrorByteCounter: ");
 printfpd("%ld", modemp[deviceindex].rsErrorByteCounter);
 printfp("\n\rldpcAvgIterations: ");
 printfpd("%ld", modemp[deviceindex].ldpcAvgIterations);
 printfp("\n\r  protectionRxBytesFromProtection: ");
 printfpd("%ld", modemp[deviceindex].protectionRxBytesFromProtection);
 printfp("\n\rprotectionUncorrectedBytes: ");
 printfpd("%ld", modemp[deviceindex].protectionUncorrectedBytes);

}
// printfp("  absoluteMseTenths: ");
// printfpd("%ld", modemp[deviceindex].absoluteMseTenths);
// printfp("  normalizedMseTenths: ");
// printfpd("%ld", modemp[deviceindex].normalizedMseTenths);
// printfp("  radialMseTenths: ");
// printfpd("%ld", modemp[deviceindex].radialMseTenths);

// printfp(" ans :");
// printfpd(" %X", ans);  
//#endif
//  printf("\n\r fecBlockCounter:%ld",   modemp[deviceindex].fecBlockCounter);
//  printf("\n\r fecUncorrectedBlockCounter:%ld", modemp[deviceindex].fecUncorrectedBlockCounter);
//  printf("\n\r rsByteCounter:%ld",  modemp[deviceindex].rsByteCounter);
//  printf("\n\r rsErrorByteCounter:%ld",  modemp[deviceindex].rsErrorByteCounter);
//  printf("\n\r ldpcAvgIterations:%ld",  modemp[deviceindex].ldpcAvgIterations);
//  printf("\n\r protectionUncorrectedBytes:%ld",   modemp[deviceindex].protectionUncorrectedBytes);


   uerrsn15503work.errsn15303work.fecBlockCounter[mod] +=   Fc.fecBlockCounter;;
   uerrsn15503work.errsn15303work.fecUncorrectedBlock[mod] +=   Fc.fecUncorrectedBlockCounter;




 // }
   UpdateErrors(deviceindex);	 //readerrors1


//_____________________________for test
//delay_mcs(50000l);
//delay_mcs(50000l);


//______________________________for test
//#ifdef USART0_TRY_PDC_1T
//  printfpd("\n\rs%ld", time1);
//#endif


#ifndef LOAD_ONE_PROVINGENT_ON_PLATA

 ans1 = PVG610_API_ModemStatusGet((deviceindex1), 0, &Ms);
// if(ans1) return;
  if(ans1) 
 {
  norma_status[deviceindex1]++;
 return;
 }
 else
  {
   norma_status[deviceindex1] = 0;
  }





if(variant != variant1)
 {
  NMSE =  Ms.normalizedMseTenths;
  LOCK =  Ms.acquireStatus;

	SetMSweep(Ms.carrierOffset);
	SetMAGC(Ms.externalAgcRegister);
	SetMEbN(Ms.normalizedMseTenths);
#ifndef FEC_BER
	SetMBER(0, Ms.ldpcDecoderStress);
#endif
 }




 //#ifdef USART0_TRY_PDC_1T
//  printfpd("\n\rf%ld", time1);
//#endif

 //  printf("\n\r acquireStatus : %02X" , Ms.acquireStatus);

   modemp[deviceindex1].acquireStatus =   Ms.acquireStatus;

 modemp[deviceindex1].acmEngineEnabled =   Ms.acmEngineEnabled;

 //  if(Ms.acmEngineEnabled)
 //  printfp("\n\rReadErrors1_10 ");

  if(1)
   {
  //	 modemp[deviceindex1].txAcmProfile =   Ms.txAcmProfile;
 //    modemp[deviceindex1].rxAcmProfile =   Ms.rxAcmProfile;

  if(1)
   {
     modemp[deviceindex1].rxAcmProfile =   Ms.rxAcmProfile;	

	 if(variant != variant1)
	 {
   	 SetParamsRxFromCfg(Ms.rxAcmProfile);				 //need use cfg for proving 1
	 SetViewModesFromCfg(Ms.txAcmProfile ,Ms.rxAcmProfile);

if(g_previons_status1 != modemp[deviceindex1].acquireStatus)
//if(1)
 {
   //hier can set need write event to yournal  

  //   previons_status =	 modemp[deviceindex].acquireStatus;

   sprintf(Buf, "%02d",deviceindex);

   if(modemp[deviceindex1].acquireStatus)
   {
#ifdef YOURNAL
     Add_Event(EV_LOCK, 2, Buf); //for test	   it work for variant ==  variant1 only
	 timelock = time1;
	  timekeepMSE = time1;

#endif
   }
   else
   {
#ifdef YOURNAL
	 Add_Event(EV_UNLOCK, 2, Buf); //for test
#endif
   }
 }
  g_previons_status1 =	 modemp[deviceindex].acquireStatus;

	 }
	}

   }
   else
   {
	 modemp[deviceindex1].txAcmProfile =   ACM_MODES;
     modemp[deviceindex1].rxAcmProfile =   ACM_MODES;
   }
	 
  // }


     modemp[deviceindex1].internalAgc = Ms.internalAgc;            // in dB, normal range [-5 to 40]
     modemp[deviceindex1].externalAgcRegister = Ms.externalAgcRegister;    // Directly reflects PVG register

 
//110823  if(Ms.acquireStatus)
if(1) //110823
 {
  unStatePUM.statePUM.state[9] = Ms.normalizedMseTenths;//2
  unStatePUM.statePUM.state[10] = Ms.normalizedMseTenths >> 8;//2
   //___________________________________________________________
modemp[deviceindex1].counterSlip =   Ms.lastAcquireError;
modemp[deviceindex1].absoluteMseTenths =   Ms.absoluteMseTenths;
modemp[deviceindex1].normalizedMseTenths =   Ms.normalizedMseTenths;
modemp[deviceindex1].radialMseTenths =   Ms.radialMseTenths;


//___________________________________________________________

//#ifdef USART0_TRY_PDC_1T
//  printfpd("\n\rcs%ld", time1);
//#endif
//___________________________________
ans1 = PVG610_API_ModemAcquireCountersGet((deviceindex1), 0, &Ac);
 if(ans1) return;
//#ifdef USART0_TRY_PDC_1T
//  printfpd("\n\raf%ld", time1);
//#endif

//uerrsn15503work.errsn15303work.counterSlip[mod] +=   Ac.numLolEvents;

//if(!(Ac.numLolEvents)) //110823

if( (!(Ac.numLolEvents)) && (Ms.acquireStatus) )
{
 unStatePUM.statePUM.state[2] &= ~(CHANNEL2_LOCK_BIT);//2
}
else
{
 unStatePUM.statePUM.state[2] |= CHANNEL2_LOCK_BIT;//2
}
 






//printEthLongHex(unStatePUM.statePUM.state[2] + ((Ms.acquireStatus)<<8) + (Ac.numLolEvents<<16));


//__________________________________



ans1 =   PVG610_API_ModemFecCountersGet(deviceindex1, 0, &Fc);
   if(ans1) return;

//#ifdef USART0_TRY_PDC_1T
//  printfpd("\n\rcf%ld", time1);
//#endif

  modemp[deviceindex1].fecBlockCounter =   Fc.fecBlockCounter;
  modemp[deviceindex1].fecUncorrectedBlockCounter =   Fc.fecUncorrectedBlockCounter;
  modemp[deviceindex1].rsByteCounter =   Fc.rsByteCounter;
  modemp[deviceindex1].rsErrorByteCounter =   Fc.rsErrorByteCounter;
  modemp[deviceindex1].ldpcAvgIterations =   Fc.ldpcAvgIterations;
  modemp[deviceindex1].protectionRxBytesFromProtection =   Fc.protectionRxBytesFromProtection;
  modemp[deviceindex1].protectionUncorrectedBytes =   Fc.protectionUncorrectedBytes;


#ifdef FEC_BER
if(variant != variant1)
 {

SetMBER(Fc.fecBlockCounter, Fc.fecUncorrectedBlockCounter);
//SetMBER(Fc.fecUncorrectedBlockCounter, Fc.fecBlockCounter);
}
#endif // FEC_BER


//  KoefErrors[deviceindex1] =	 (double)Fc.protectionRxBytesFromProtection / (double)Fc.rsByteCounter;
//#ifndef USART0_TRY_PDC_1T
//  printf("\n\rmod :  %d  Status : %d prot:%ld ans1 : %X", (deviceindex1), modemp[deviceindex1].acquireStatus, modemp[deviceindex1].protectionRxBytesFromProtection, ans1);
//#else
// printfp("\n\rmod : ");
// printfpd("%d",(deviceindex1));
// printfp(" Status : ");
// printfpd("%d", modemp[deviceindex1].acquireStatus);
// printfp("  prot: ");
// printfpd("%ld", modemp[deviceindex1].protectionRxBytesFromProtection);
// printfp("  absoluteMseTenths: ");
// printfpd("%ld", modemp[deviceindex1].absoluteMseTenths);
// printfp("  normalizedMseTenths: ");
// printfpd("%ld", modemp[deviceindex1].normalizedMseTenths);
// printfp("  radialMseTenths: ");
// printfpd("%ld", modemp[deviceindex1].radialMseTenths);
 
if(GetTestMode() == 0x5A)
{
//#ifndef USART0_TRY_PDC_1T
// printf("\r\nmod : %d Status : %d prot:%ld ans : %X", (deviceindex), modemp[deviceindex].acquireStatus, modemp[deviceindex].protectionRxBytesFromProtection, ans);
//#else
 printfp("\n\rmod : ");
 printfpd("%d",(deviceindex1));
 printfp("\n\r Status : ");
 printfpd("%d", modemp[deviceindex1].acquireStatus);
 printfp("\n\r ldpcDecoderStress");
 printfpd("%ld" , Ms.ldpcDecoderStress);
 printfp("\n\rfecBlockCounter: ");
 printfpd("%ld", modemp[deviceindex1].fecBlockCounter);
 printfp("\n\rfecUncorrectedBlockCounter: ");
 printfpd("%ld", modemp[deviceindex1].fecUncorrectedBlockCounter);
 printfp("\n\rrsErrorByteCounter: ");
 printfpd("%ld", modemp[deviceindex1].rsErrorByteCounter);
 printfp("\n\rldpcAvgIterations: ");
 printfpd("%ld", modemp[deviceindex1].ldpcAvgIterations);
 printfp("\n\r  protectionRxBytesFromProtection: ");
 printfpd("%ld", modemp[deviceindex1].protectionRxBytesFromProtection);
 printfp("\n\rprotectionUncorrectedBytes: ");
 printfpd("%ld", modemp[deviceindex1].protectionUncorrectedBytes);

}
 
// printfp(" ans1 :");
// printfpd(" %X", ans1);  
//#endif
  }
 


#endif // LOAD_ONE_PROVINGENT_ON_PLATA
 //  UpdateErrors(mod);
}

